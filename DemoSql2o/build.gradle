apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

def jarBaseName = 'demo-sql2o'
def distributionFolder = 'demo-sql2o'
def configFiles = ['application.properties', 'log4j2.xml'] as Set
def libFiles = ['com/demo/sql2o/repository/*.elsql'] as Set

jar {
    baseName = jarBaseName
    exclude configFiles
    exclude libFiles
}

buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/libs-milestone" }
}

configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    exclude group: "org.springframework.boot", module: "logback-classic"
}

dependencies {
    //Spring Boot
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.springframework.boot:spring-boot-starter-web")

    //JSON
    compile("com.google.code.gson:gson")

    //MySql
    compile files("libs/mysql-connector-java-8.0.15.jar")

    //Sql2o
    compile("org.sql2o:sql2o:1.5.4")

    //ElSql
    compile("com.opengamma:elsql:1.3")

    //Web Server
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")

    //test
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.mockito:mockito-all:1.10.19")
    testCompile("org.testng:testng:6.14.3")
    testCompile("org.assertj:assertj-core:3.10.0")
}

task copyFilesToPackage << {
    copy {
        from('src/main/resources') {
            include libFiles
        }
        from 'build/libs/' + jarBaseName + '.jar'
        into 'build/' + distributionFolder + '/lib'
    }

    copy {
        from('src/main/resources') {
            include configFiles
        }
        into 'build/' + distributionFolder
    }
}

task zipPackage(type: Zip, dependsOn: 'copyFilesToPackage') {
    from 'build/' + distributionFolder
    baseName distributionFolder
}

build.dependsOn zipPackage
zipPackage.mustRunAfter check