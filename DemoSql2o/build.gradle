plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.4.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

def jarBaseName = 'demo-sql2o'
def distributionFolder = 'demo-sql2o'
def configFiles = ['application.properties', 'database.properties', 'log4j2.xml'] as Set
def libFiles = ['com/demo/sql2o/repository/*.elsql'] as Set

jar {
    archivesBaseName = jarBaseName
    exclude configFiles
    exclude libFiles
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    exclude group: "org.springframework.boot", module: "logback-classic"
}

dependencies {
    //Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    //JSON
    implementation 'com.google.code.gson:gson'

    //Commons DBCP
    implementation 'org.apache.commons:commons-dbcp2:2.7.0'

    //MySql
    implementation 'mysql:mysql-connector-java'

    //Sql2o
    implementation 'org.sql2o:sql2o:1.6.0'

    //ElSql
    implementation 'com.opengamma:elsql:1.3'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.testng:testng:7.3.0'
    testImplementation 'org.assertj:assertj-core:3.17.0'
}

task copyFilesToPackage {
    doLast {
        copy {
            from('src/main/resources') {
                include libFiles
            }
            from 'build/libs/' + jarBaseName + '.jar'
            into 'build/' + distributionFolder + '/lib'
        }

        copy {
            from('src/main/resources') {
                include configFiles
            }
            into 'build/' + distributionFolder
        }
    }
}

task zipPackage(type: Zip, dependsOn: 'copyFilesToPackage') {
    from 'build/' + distributionFolder
    baseName distributionFolder
}

build.dependsOn zipPackage
zipPackage.mustRunAfter check